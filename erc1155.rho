new 
  mainCh,
  createTokenCh,
  purchaseCh,
  entryCh,
  entryUriCh,
  setLockedCh,
  updateUriCh,
  hashCh,
  verifySignatureCh,
  tokens,
  tokensData,
  verifySignatureAndUpdateNonceCh,
  insertArbitrary(`rho:registry:insertArbitrary`),
  stdout(`rho:io:stdout`),
  secpVerify(`rho:crypto:secp256k1Verify`),
  blake2b256(`rho:crypto:blake2b256Hash`),
  revAddress(`rho:rev:address`),
  registryLookup(`rho:registry:lookup`)
in {


  /*
    tokens: {
      [uniqueId: number (incremental id)]: {
        publicKey: string (public key),
        n: Nil \/ number (token id),
        price: Nil \/ Int
        quantity: number
      }
    }
  */
  tokens!({}) |

  /*
    tokensData: {
      [n: number (token id)]: string (unforgeable name)
    }
  */
  tokensData!({}) |

  for (@(payload, returnCh) <= verifySignatureAndUpdateNonceCh) {
    match payload {
      { "newNonce": String, "signature": String} => {
        for (@current <<- mainCh) {
          blake2b256!(
            current.get("nonce").toUtf8Bytes(),
            *hashCh
          ) |
          for (@hash <- hashCh) {
            secpVerify!(
              hash,
              payload.get("signature").hexToBytes(),
              current.get("publicKey").hexToBytes(),
              *verifySignatureCh
            )
          } |
          for (@result <- verifySignatureCh) {
            match result {
              true => {
                @returnCh!(true) |
                for (@c <- mainCh) {
                  mainCh!(c.set("nonce", payload.get("newNonce")))
                }
              }
              false => {
                @returnCh!("error: Invalid signature, could not change price")
              }
            }
          }
        }
      }
      _ => {
        @returnCh!("error: invalid payload, structure should be { \"newNonce\": String, \"signature\": String }")
      }
    }
  } |

  contract setLockedCh(payload, return) = {
    stdout!("setLockedCh") |

    for (@current <<- mainCh) {
      match current.get("locked") {
        true => {
          return!("error: contract is already locked")
        }
        false => {
          new verifyCh in {
            verifySignatureAndUpdateNonceCh!((
              {
                "newNonce": *payload.get("newNonce"),
                "signature": *payload.get("signature"),
              },
              *verifyCh
            )) |
            for (@verifyResult <- verifyCh) {
              match verifyResult {
                true => {
                  for (@c <- mainCh) {
                    mainCh!(c.set("locked", true))
                  } |
                  return!(true)
                }
                err => {
                  return!(err)
                }
              }
            }
          }
        }
      }
    }
  } |

  // add a token (1 or more)
  contract createTokenCh(payload, return) = {
    stdout!("createTokenCh") |

    for (@current <<- mainCh) {
      match current.get("locked") {
        true => {
          return!("error: contract is locked, cannot create token")
        }
        false => {
          for (@currentTokens <- tokens) {
            new verifyCh in {
              verifySignatureAndUpdateNonceCh!((
                {
                  "newNonce": *payload.get("newNonce"),
                  "signature": *payload.get("signature"),
                },
                *verifyCh
              )) |
              for (@verifyResult <- verifyCh) {
                match verifyResult {
                  true => {
                    match currentTokens.size() {
                      uniqueId => {
                        new nCh in {

                          match *payload.get("n") {
                            // token n already exists
                            Int => { nCh!(*payload.get("n")) }
                            // token n does not exist, unique ID will be used as n
                            _ => { nCh!(uniqueId) }
                          } |

                          for (@n <- nCh) {

                            tokens!(
                              currentTokens.set(uniqueId, {
                                "quantity": *payload.get("quantity"),
                                "publicKey": *payload.get("publicKey"),
                                "n": n,
                                "price": *payload.get("price"),
                              })
                            ) |

                            match *payload.get("data") {
                              Nil => {}
                              data => {
                                for (@currentTokensData <- tokensData) {
                                  tokensData!(
                                    currentTokensData.set(n, data)
                                  )
                                }
                              }
                            } |

                            return!(true)
                          }
                        }
                      }
                    }
                  }
                  err => {
                    return!(err)
                  }
                }
              }
            }
          }
        }
      }
    }
  } |

  // purchase token (1 or more)
  contract purchaseCh(payload, return) = {
    stdout!("purchaseCh") |

    for (@currentTokens <- tokens) {
      match currentTokens.get(*payload.get("uniqueId")) {
        Nil => {
          tokens!(currentTokens) |
          return!("error : token (unique ID) " ++ *payload.get("uniqueId") ++ " does not exist")
        }
        token => {
          match token.get("quantity") - *payload.get("quantity") >= 0 {
            false => {
              tokens!(currentTokens) |
              return!("error : not enough tokens (unique ID) " ++ *payload.get("uniqueId") ++ " available")
            }
            true => {

              new RevVaultCh, ownerRevAddressCh in {

                registryLookup!(`rho:rchain:revVault`, *RevVaultCh) |
                revAddress!("fromPublicKey", token.get("publicKey").hexToBytes(), *ownerRevAddressCh) |

                for (@(_, RevVault) <- RevVaultCh; @ownerRevAddress <- ownerRevAddressCh) {
                  match (
                    *payload.get("purseRevAddr"),
                    ownerRevAddress,
                    *payload.get("quantity") * token.get("price")
                  ) {
                    (from, to, amount) => {

                      new purseVaultCh in {
                        @RevVault!("findOrCreate", from, *purseVaultCh) |
                        for (@(true, purseVault) <- purseVaultCh) {

                          new resultCh in {
                            @purseVault!("transfer", to, amount, *payload.get("purseAuthKey"), *resultCh) |
                            for (@result <- resultCh) {

                              match result {
                                (true, Nil) => {
                                  match currentTokens.size() {
                                    uniqueId => {
                                      tokens!(
                                        currentTokens.set(uniqueId, {
                                          "quantity": *payload.get("quantity"),
                                          "publicKey": *payload.get("publicKey"),
                                          "n": token.get("n"),
                                          "price": Nil,
                                        })
                                      ) |
                                      return!(true)
                                    }
                                  }
                                }
                                _ => {
                                  tokens!(currentTokens) |
                                  return!("error : REV transfer went wrong " ++ result.nth(2))
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  } |

  contract entryCh(action, return) = {
    match *action.get("type") {
      "READ_TOKENS" => {
        for (currentTokens <<- tokens) {
          return!(*currentTokens)
        }
      }
      "READ_TOKENS_DATA" => {
        for (@currentTokensData <<- tokensData) {
          return!(currentTokensData)
        }
      }
      "READ" => {
        for (current <<- mainCh) {
          return!(*current)
        }
      }
      "SET_LOCKED" => {
        match *action.get("payload") {
          { "locked": true, "signature": String, "newNonce": String } => {
            setLockedCh!(*action.get("payload"), *return)
          }
          _ => {
            return!("error: invalid payload, structure should be { \"quantity\": Int, \"n\": Nil or Int, \"price\": Nil or Int, \"publicKey\": String, \"data\": _ }")
          }
        }
      }
      "CREATE_TOKEN" => {
        match *action.get("payload") {
          { "signature": String, "newNonce": String, "quantity": Int, "publicKey": String, "price": Nil \/ Int, "n": Nil \/ Int, "data": _ } => {
            createTokenCh!(*action.get("payload"), *return)
          }
          _ => {
            return!("error: invalid payload, structure should be { \"quantity\": Int, \"n\": Nil or Int, \"price\": Nil or Int, \"publicKey\": String, \"data\": _ }")
          }
        }
      }
      "PURCHASE_TOKEN" => {
        match *action.get("payload") {
          { "quantity": Int, "uniqueId": Int, "publicKey": String, "purseRevAddr": _, "purseAuthKey": _ } => {
            purchaseCh!(*action.get("payload"), *return)
          }
          _ => {
            return!("error: invalid payload, structure should be { \"quantity\": Int, \"n\": Int, \"publicKey\": String }")
          }
        }
      }
      _ => {
        return!("error: unknown action")
      }
    }
  } |

  insertArbitrary!(*entryCh, *entryUriCh) |

  for (entryUri <- entryUriCh) {

    mainCh!({
      "registryUri": *entryUri,
      "locked": false,
      "publicKey": "PUBLIC_KEY",
      "nonce": "NONCE",
      "version": "0.1"
    }) |
    stdout!({
      "registryUri": *entryUri,
      "locked": false,
      "publicKey": "PUBLIC_KEY",
      "nonce": "NONCE",
      "version": "0.1"
    })
  }
}
